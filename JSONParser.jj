
options {
	CHOICE_AMBIGUITY_CHECK=3;
	OTHER_AMBIGUITY_CHECK=2;
	ERROR_REPORTING=true;
	JAVA_UNICODE_ESCAPE=true;
	UNICODE_INPUT=true;
	IGNORE_CASE=true;
	SUPPORT_CLASS_VISIBILITY_PUBLIC=false;
	FORCE_LA_CHECK=true;
	CACHE_TOKENS=true;
    SANITY_CHECK = true;
	STATIC=false;
}

PARSER_BEGIN(JSONParser)

package com.nexon.jsonparser.jj;

import java.io.*;
import java.util.*;
import java.math.*;

/**
* Basic JSON parser generated by JavaCC. It consumes the input provided through the constructor when 
* {@code parseObject()}, {@code parseList()}, or {@code parse()} are called, and there is no way to directly
* reset the state.
* Set the {@code fallbackToString} property if you want to enable
* unparseable constructs (such as unqouted strings) to be handled as Strings: otherwise, they are a parse
* error.
*
* <p />
*
* This class makes no pretenses towards being threadsafe.
*/
public class JSONParser {


}

PARSER_END(JSONParser)

// Ignore comments
SKIP: {
	<C_SINGLE_COMMENT: "//" (~["\n","\r","\f"])* <EOL>>
| <C_MULTILINE_COMMENT: "/*" (~[])* "*/">
| <SH_SINGLE_COMMENT: "#" (~["\n","\r","\f"])* <EOL>>
| <WHITESPACE: " " | "\t"> 
| <EOL: "\n" | "\r" | "\f"> 
}

// Common tokens
TOKEN: {
	<COMMA: ",">
}

// Object tokens
TOKEN:{
	<BRACE_OPEN: "{"> | <BRACE_CLOSE: "}"> | <COLON: ":">
}

// Array tokens
TOKEN:{
	<BRACKET_OPEN: "[">
| <BRACKET_CLOSE: "]">
}

// Number token
TOKEN:{
	<#ZERO: "0">
| <#DIGIT_NONZERO: ["1"-"9"]>
| <#DIGIT: (<DIGIT_NONZERO> | <ZERO>) >
| <NUMBER_INTEGER:
		("-")?
		( (<ZERO>)+ | ( <DIGIT_NONZERO> (<DIGIT>)* ) ) 
	>
| <NUMBER_DECIMAL: 
		("-")?  
		( (<ZERO>)+ | ( <DIGIT_NONZERO> (<DIGIT>)* ) ) 
		("." 
			(<DIGIT>)+  
			(
				["e","E"]
				("+" | "-")?
				(<DIGIT>)+
			)?
		)
	>
}

// Boolean tokens
TOKEN:{
	<TRUE: "true">
| <FALSE: "false">
}

// Null token
TOKEN:{
	<NULL: "null">
}

// String tokens
TOKEN:{
	<#QUOTE_DOUBLE: "\"">
| <#QUOTE_SINGLE: "'">
| <STRING_SINGLE_EMPTY: "''">
| <STRING_DOUBLE_EMPTY: "\"\"">
| <#STRING_SINGLE_BODY: (
		(~["'","\\","\r","\n","\f","\t"]) |
		( "\\" ( "r" | "n" | "f" | "\\" | "/" | "'" | "b" | "t" ) )
	)+>
| <#STRING_DOUBLE_BODY: (
		(~["\"","\\","\r","\n","\f","\t"]) |
		( "\\" ( "r" | "n" | "f" | "\\" | "/" | "\"" | "b" | "t" ) )
	)+>
| <STRING_SINGLE_NONEMPTY: <QUOTE_SINGLE> <STRING_SINGLE_BODY> <QUOTE_SINGLE>>
| <STRING_DOUBLE_NONEMPTY: <QUOTE_DOUBLE> <STRING_DOUBLE_BODY> <QUOTE_DOUBLE>>
| <RUBY_SYMBOL:  ":" (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_")+>
}

// Raw symbol tokens
TOKEN:{
	<SYMBOL: (["a"-"z", "A"-"Z", "0", "1"-"9"])+ >
}